# **An√°lise Detalhada do C√≥digo do Quiz sobre Jesus em Flutter**  

Vou explicar **linha por linha** e **elemento por elemento** do c√≥digo, detalhando cada parte para facilitar o entendimento.  

---

## **1. Importa√ß√£o de Bibliotecas**  
```dart
import 'package:flutter/material.dart';
```
- **`import`**: Usado para incluir bibliotecas necess√°rias.  
- **`package:flutter/material.dart`**: Biblioteca principal do Flutter que cont√©m widgets e ferramentas para criar interfaces no estilo Material Design.  

---

## **2. Fun√ß√£o Principal (`main`)**  
```dart
void main() {
  runApp(MyApp());
}
```
- **`void main()`**: Ponto de entrada do aplicativo (obrigat√≥rio em Dart).  
- **`runApp(MyApp())`**: Inicia o app Flutter e define `MyApp` como o widget raiz.  

---

## **3. Widget `MyApp` (StatefulWidget)**  
```dart
class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}
```
- **`class MyApp extends StatefulWidget`**: Define um widget que pode mudar de estado (`StatefulWidget`).  
- **`@override`**: Indica que o m√©todo est√° sobrescrevendo um m√©todo da classe pai.  
- **`createState()`**: M√©todo que cria e retorna o estado (`_MyAppState`) associado a este widget.  

---

## **4. Estado do Aplicativo (`_MyAppState`)**  
### **4.1. Lista de Perguntas (`perguntas`)**  
```dart
final List<Map<String, dynamic>> perguntas = [
  {
    'pergunta': 'Onde Jesus nasceu?',
    'opcoes': ['Bel√©m', 'Jerusal√©m', 'Nazar√©'],
    'respostaCorreta': 'Bel√©m',
  },
  // ... outras perguntas
];
```
- **`final`**: Indica que a vari√°vel n√£o pode ser alterada ap√≥s sua inicializa√ß√£o.  
- **`List<Map<String, dynamic>>`**: Uma lista (`List`) de maps (`Map`), onde cada map tem:  
  - `'pergunta'` (String): Texto da pergunta.  
  - `'opcoes'` (List<String>): Lista de op√ß√µes de resposta.  
  - `'respostaCorreta'` (String): Resposta correta.  

### **4.2. Lista de Imagens (`imagensPerguntas`)**  
```dart
final List<String> imagensPerguntas = [
  'https://...', // Imagem para pergunta 1
  // ... outras imagens
];
```
- **`List<String>`**: Lista de URLs de imagens correspondentes a cada pergunta.  

### **4.3. Vari√°veis de Estado**  
```dart
int perguntaAtual = 0;       // √çndice da pergunta atual (come√ßa em 0)
int pontos = 0;              // Pontua√ß√£o do jogador
String? mensagem;            // Mensagem de feedback (pode ser nula)
String? imagemFeedback;      // Imagem de feedback (pode ser nula)
bool quizFinalizado = false; // Indica se o quiz terminou
```
- **`int`**: Tipo para n√∫meros inteiros.  
- **`String?`**: `String` que pode ser `null` (nullable).  
- **`bool`**: Tipo booleano (`true`/`false`).  

---

## **5. Fun√ß√£o `verificarResposta`**  
```dart
void verificarResposta(String respostaEscolhida) {
  String respostaCorreta = perguntas[perguntaAtual]['respostaCorreta'];

  setState(() {
    if (respostaEscolhida == respostaCorreta) {
      pontos++; // Incrementa pontua√ß√£o se acertar
      mensagem = 'Resposta certa, raz√¥! +1';
      imagemFeedback = 'https://...checked.png'; // Imagem de acerto
    } else {
      mensagem = 'Resposta errada, catapimbas!';
      imagemFeedback = 'https://...cancel.png'; // Imagem de erro
    }
  });

  Future.delayed(Duration(seconds: 2), () {
    setState(() {
      mensagem = null;
      imagemFeedback = null;
      if (perguntaAtual < perguntas.length - 1) {
        perguntaAtual++; // Vai para pr√≥xima pergunta
      } else {
        quizFinalizado = true; // Finaliza o quiz
      }
    });
  });
}
```
### **Explica√ß√£o Detalhada**  
1. **`verificarResposta(String respostaEscolhida)`**:  
   - Recebe a resposta selecionada pelo usu√°rio.  
2. **`respostaCorreta = perguntas[perguntaAtual]['respostaCorreta']`**:  
   - Pega a resposta correta da pergunta atual.  
3. **`setState(() { ... })`**:  
   - Atualiza o estado do widget (muda a UI).  
4. **`if (respostaEscolhida == respostaCorreta)`**:  
   - Verifica se a resposta est√° correta.  
   - Se sim:  
     - `pontos++`: Adiciona 1 ponto.  
     - Define `mensagem` e `imagemFeedback` para acerto.  
   - Se n√£o:  
     - Define `mensagem` e `imagemFeedback` para erro.  
5. **`Future.delayed(Duration(seconds: 2), () { ... })`**:  
   - Espera 2 segundos antes de:  
     - Limpar `mensagem` e `imagemFeedback`.  
     - Ir para pr√≥xima pergunta ou finalizar o quiz.  

---

## **6. Fun√ß√£o `reiniciarQuiz`**  
```dart
void reiniciarQuiz() {
  setState(() {
    perguntaAtual = 0;      // Volta para a primeira pergunta
    pontos = 0;             // Zera a pontua√ß√£o
    quizFinalizado = false;  // Reinicia o quiz
    mensagem = null;        // Limpa mensagem
    imagemFeedback = null;  // Limpa imagem de feedback
  });
}
```
- **`reiniciarQuiz()`**:  
  - Reseta todas as vari√°veis de estado para reiniciar o quiz.  

---

## **7. Constru√ß√£o da Interface (`build`)**  
### **7.1. Configura√ß√£o do `MaterialApp`**  
```dart
return MaterialApp(
  theme: ThemeData(
    primaryColor: Colors.green[200],
    scaffoldBackgroundColor: Color(0xFFD6F1D3),
    textTheme: TextTheme(bodyMedium: TextStyle(color: Colors.black87)),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.blue[200],
        foregroundColor: Colors.black87,
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    ),
  ),
  home: Scaffold(...),
);
```
- **`MaterialApp`**: Widget raiz que define o tema e a navega√ß√£o.  
- **`theme`**: Define cores e estilos globais.  
- **`home: Scaffold(...)`**: Tela principal do app.  

### **7.2. `Scaffold` (Estrutura da Tela)**  
```dart
home: Scaffold(
  appBar: AppBar(
    title: Text('Quiz sobre Jesus'),
    backgroundColor: Colors.green[300],
  ),
  body: Center(...),
),
```
- **`Scaffold`**: Fornece uma estrutura b√°sica de layout (AppBar, Body, etc.).  
- **`AppBar`**: Barra superior com t√≠tulo e cor de fundo.  
- **`body: Center(...)`**: Centraliza o conte√∫do.  

### **7.3. L√≥gica do Quiz na UI**  
```dart
body: Center(
  child: quizFinalizado
    ? Column( // Tela de finaliza√ß√£o
        children: [
          Text('Parab√©ns! Voc√™ terminou o quiz!'),
          Text('Sua pontua√ß√£o: $pontos/${perguntas.length}'),
          ElevatedButton(onPressed: reiniciarQuiz, child: Text('Recome√ßar')),
        ],
      )
    : Column( // Tela do quiz em andamento
        children: [
          Image.network(imagensPerguntas[perguntaAtual], width: 200, height: 150),
          Text(perguntas[perguntaAtual]['pergunta']),
          ...perguntas[perguntaAtual]['opcoes'].map((opcao) => 
            ElevatedButton(
              onPressed: () => verificarResposta(opcao),
              child: Text(opcao),
            ),
          ),
          if (mensagem != null) ...[
            Image.network(imagemFeedback!, width: 64, height: 64),
            Text(mensagem!),
          ],
        ],
      ),
),
```
#### **Explica√ß√£o Detalhada**  
1. **`quizFinalizado ? ... : ...`**:  
   - Se `quizFinalizado == true`, mostra a tela de resultados.  
   - Sen√£o, mostra a pergunta atual.  
2. **Tela de Finaliza√ß√£o (`quizFinalizado == true`)**:
   - Exibe mensagem de parab√©ns.  
   - Mostra pontua√ß√£o (`$pontos/${perguntas.length}`).  
   - Bot√£o **"Recome√ßar"** que chama `reiniciarQuiz()`.  
3. **Tela do Quiz (`quizFinalizado == false`)**:
   - **`Image.network`**: Exibe a imagem da pergunta atual.  
   - **`Text(perguntas[perguntaAtual]['pergunta'])`**: Mostra o texto da pergunta.  
   - **`...perguntas[perguntaAtual]['opcoes'].map(...)`**:  
     - Cria um bot√£o para cada op√ß√£o de resposta.  
     - Quando clicado, chama `verificarResposta(opcao)`.  
   - **`if (mensagem != null)`**:  
     - Se houver feedback (`mensagem`), mostra a imagem e o texto.  

---

## **Conclus√£o**  
Este c√≥digo implementa um **quiz interativo** com:  
‚úÖ **Perguntas e respostas** (armazenadas em uma lista).  
‚úÖ **Imagens para cada pergunta**.  
‚úÖ **Feedback visual** (imagens e mensagens).  
‚úÖ **Pontua√ß√£o e reinicializa√ß√£o**.  
‚úÖ **UI responsiva** com `MaterialApp`, `Scaffold`, `Column`, `ElevatedButton`, etc.  

√â um **exemplo completo** de um app Flutter com **gerenciamento de estado** e **interface interativa**. üöÄ
